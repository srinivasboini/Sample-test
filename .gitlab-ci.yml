stages:
  - validate
  - build
  - test
  - package
  - publish
  - build-image
  - deploy

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE
  NEXUS_URL: "${NEXUS_BASE_URL}"
  NEXUS_REPOSITORY: "maven-releases"
  NEXUS_SNAPSHOT_REPOSITORY: "maven-snapshots"
  # Avro Publishing Control
  PUBLISH_AVRO_SCHEMAS: "false"

# Global cache configuration
cache:
  paths:
    - .m2/repository/
    - target/
    - modules/*/target/

# Validate stage
validate:
  stage: validate
  image: maven:3.9.4-openjdk-17-slim
  script:
    - mvn $MAVEN_CLI_OPTS validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Compile and build all modules
compile:
  stage: build
  image: maven:3.9.4-openjdk-17-slim
  script:
    # Build all modules in the correct order (Maven will handle this automatically)
    - mvn $MAVEN_CLI_OPTS clean install -DskipTests
  artifacts:
    paths:
      - modules/*/target/
      - target/
      - .m2/repository/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Run unit tests
unit-tests:
  stage: test
  image: maven:3.9.4-openjdk-17-slim
  script:
    - mvn $MAVEN_CLI_OPTS test
  artifacts:
    when: always
    reports:
      junit:
        - modules/*/target/surefire-reports/TEST-*.xml
    paths:
      - modules/*/target/surefire-reports/
      - modules/*/target/site/jacoco/
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Integration tests (if any)
integration-tests:
  stage: test
  image: maven:3.9.4-openjdk-17-slim
  services:
    - postgres:15-alpine
  variables:
    POSTGRES_DB: sample_db_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    SPRING_PROFILES_ACTIVE: test
    SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/sample_db_test
    SPRING_DATASOURCE_USERNAME: postgres
    SPRING_DATASOURCE_PASSWORD: password
  script:
    - mvn $MAVEN_CLI_OPTS verify -Dspring.profiles.active=test
  artifacts:
    when: always
    reports:
      junit:
        - modules/*/target/failsafe-reports/TEST-*.xml
    paths:
      - modules/*/target/failsafe-reports/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  allow_failure: true

# Package all modules (excluding Avro from auto-deployment)
package:
  stage: package
  image: maven:3.9.4-openjdk-17-slim
  script:
    # Package everything but skip deployment by default
    - mvn $MAVEN_CLI_OPTS package -DskipTests -Dmaven.deploy.skip=true
  artifacts:
    paths:
      - modules/*/target/*.jar
      - modules/application/target/*.jar
      - modules/avro/target/*.jar
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Manual Avro Schema Publishing (Snapshot)
publish-avro-snapshot:
  stage: publish
  image: maven:3.9.4-openjdk-17-slim
  script:
    - |
      # Check if Avro publishing is enabled
      if [ "$PUBLISH_AVRO_SCHEMAS" != "true" ]; then
        echo "🛑 Avro schema publishing is disabled (PUBLISH_AVRO_SCHEMAS=$PUBLISH_AVRO_SCHEMAS)"
        echo "💡 To enable: Set PUBLISH_AVRO_SCHEMAS=true in GitLab variables or job variables"
        exit 1
      fi
      
      echo "🔍 Publishing Avro Schemas to Snapshot Repository"
      
      # Configure Maven settings for Nexus authentication
      mkdir -p ~/.m2
      cat > ~/.m2/settings.xml << EOF
      <settings>
        <servers>
          <server>
            <id>nexus-releases</id>
            <username>${NEXUS_USERNAME}</username>
            <password>${NEXUS_PASSWORD}</password>
          </server>
          <server>
            <id>nexus-snapshots</id>
            <username>${NEXUS_USERNAME}</username>
            <password>${NEXUS_PASSWORD}</password>
          </server>
        </servers>
      </settings>
      EOF
      
      # Update Avro version to SNAPSHOT if not already
      mvn versions:set -DnewVersion=${AVRO_SCHEMA_VERSION:-1.0.0}-SNAPSHOT -pl modules/avro
      
      # Deploy only the Avro module with sources and javadoc
      mvn $MAVEN_CLI_OPTS clean deploy -Davro.publish.enabled=true -pl modules/avro
      
      echo "✅ Avro Schemas ${AVRO_SCHEMA_VERSION:-1.0.0}-SNAPSHOT published to Nexus"
  dependencies:
    - package
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: false
    - if: $CI_COMMIT_MESSAGE =~ /\[publish-avro-snapshot\]/
      when: on_success
    # Auto-trigger if PUBLISH_AVRO_SCHEMAS is explicitly set to true
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $PUBLISH_AVRO_SCHEMAS == "true"
      when: on_success
  environment:
    name: nexus-avro-snapshots
    url: ${NEXUS_BASE_URL}/repository/maven-snapshots/com/example/avro-schemas/

# Manual Avro Schema Publishing (Release)
publish-avro-release:
  stage: publish
  image: maven:3.9.4-openjdk-17-slim
  script:
    - |
      # Check if Avro publishing is enabled
      if [ "$PUBLISH_AVRO_SCHEMAS" != "true" ]; then
        echo "🛑 Avro schema publishing is disabled (PUBLISH_AVRO_SCHEMAS=$PUBLISH_AVRO_SCHEMAS)"
        echo "💡 To enable: Set PUBLISH_AVRO_SCHEMAS=true in GitLab variables or job variables"
        exit 1
      fi
      
      echo "🚀 Publishing Avro Schemas Release Version"
      
      # Validate that AVRO_SCHEMA_VERSION is set and not a snapshot
      if [ -z "$AVRO_SCHEMA_VERSION" ]; then
        echo "❌ AVRO_SCHEMA_VERSION variable must be set for release publishing"
        exit 1
      fi
      
      if echo "$AVRO_SCHEMA_VERSION" | grep -q "SNAPSHOT"; then
        echo "❌ AVRO_SCHEMA_VERSION cannot contain SNAPSHOT for release publishing"
        exit 1
      fi
      
      # Configure Maven settings for Nexus authentication
      mkdir -p ~/.m2
      cat > ~/.m2/settings.xml << EOF
      <settings>
        <servers>
          <server>
            <id>nexus-releases</id>
            <username>${NEXUS_USERNAME}</username>
            <password>${NEXUS_PASSWORD}</password>
          </server>
          <server>
            <id>nexus-snapshots</id>
            <username>${NEXUS_USERNAME}</username>
            <password>${NEXUS_PASSWORD}</password>
          </server>
        </servers>
      </settings>
      EOF
      
      # Set the release version
      mvn versions:set -DnewVersion=${AVRO_SCHEMA_VERSION} -pl modules/avro
      
      # Deploy the release version
      mvn $MAVEN_CLI_OPTS clean deploy -Davro.publish.enabled=true -pl modules/avro
      
      echo "✅ Avro Schemas ${AVRO_SCHEMA_VERSION} released to Nexus"
      
      # Create a Git tag for the Avro release if enabled
      if [ "$CREATE_AVRO_TAG" = "true" ]; then
        git config user.email "ci@example.com"
        git config user.name "GitLab CI"
        git add modules/avro/pom.xml
        git commit -m "Release Avro Schemas ${AVRO_SCHEMA_VERSION} [skip ci]" || true
        git tag "avro-v${AVRO_SCHEMA_VERSION}"
        git push origin "avro-v${AVRO_SCHEMA_VERSION}" || echo "⚠️ Could not push tag (may already exist)"
      fi
  dependencies:
    - package
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: false
    - if: $CI_COMMIT_MESSAGE =~ /\[release-avro:(.+)\]/
      when: on_success
    # Auto-trigger if PUBLISH_AVRO_SCHEMAS is true and AVRO_SCHEMA_VERSION is set
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $PUBLISH_AVRO_SCHEMAS == "true" && $AVRO_SCHEMA_VERSION
      when: on_success
  environment:
    name: nexus-avro-releases
    url: ${NEXUS_BASE_URL}/repository/maven-releases/com/example/avro-schemas/

# Publish application artifacts to Nexus (for releases only)
publish-app-nexus:
  stage: publish
  image: maven:3.9.4-openjdk-17-slim
  script:
    - |
      # Configure Maven settings for Nexus authentication
      mkdir -p ~/.m2
      cat > ~/.m2/settings.xml << EOF
      <settings>
        <servers>
          <server>
            <id>nexus-releases</id>
            <username>${NEXUS_USERNAME}</username>
            <password>${NEXUS_PASSWORD}</password>
          </server>
          <server>
            <id>nexus-snapshots</id>
            <username>${NEXUS_USERNAME}</username>
            <password>${NEXUS_PASSWORD}</password>
          </server>
        </servers>
      </settings>
      EOF
    
    # Deploy all modules except Avro (which is handled separately)
    - mvn $MAVEN_CLI_OPTS deploy -DskipTests -Davro.publish.enabled=false
  dependencies:
    - package
  rules:
    - if: $CI_COMMIT_TAG
  environment:
    name: nexus-releases
    url: ${NEXUS_BASE_URL}

# Build Docker image
build-docker:
  stage: build-image
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - |
      # Create Dockerfile for the application
      cat > Dockerfile << EOF
      FROM openjdk:17-jdk-slim
      
      # Install curl for health checks
      RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
      
      # Set working directory
      WORKDIR /app
      
      # Create non-root user
      RUN groupadd -r appgroup && useradd -r -g appgroup appuser
      
      # Copy the JAR file
      COPY modules/application/target/application-*.jar app.jar
      
      # Change ownership
      RUN chown -R appuser:appgroup /app
      
      # Switch to non-root user
      USER appuser
      
      # Expose port
      EXPOSE 8080
      
      # Health check
      HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
        CMD curl -f http://localhost:8080/actuator/health || exit 1
      
      # JVM optimization for containers
      ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
      
      # Run the application
      ENTRYPOINT ["sh", "-c", "java \$JAVA_OPTS -jar app.jar"]
      EOF
    
    # Build and tag Docker image
    - docker build -t $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA .
    - docker build -t $DOCKER_IMAGE_NAME:latest .
    
    # Push to registry
    - docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $DOCKER_IMAGE_NAME:latest
    
    # Tag and push release versions
    - |
      if [ ! -z "$CI_COMMIT_TAG" ]; then
        docker tag $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
        docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
      fi
  dependencies:
    - package
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Deploy to Development Environment
deploy-dev:
  stage: deploy
  image: alpine/k8s:1.28.2
  variables:
    ENVIRONMENT: "development"
    NAMESPACE: "sample-test-dev"
  script:
    - |
      # Create Kubernetes manifests
      mkdir -p k8s
      
      # Deployment manifest
      cat > k8s/deployment.yml << EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: sample-test-app
        namespace: ${NAMESPACE}
        labels:
          app: sample-test
          environment: ${ENVIRONMENT}
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: sample-test
        template:
          metadata:
            labels:
              app: sample-test
          spec:
            containers:
            - name: sample-test
              image: ${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHA}
              ports:
              - containerPort: 8080
              env:
              - name: SPRING_PROFILES_ACTIVE
                value: "dev"
              - name: SPRING_DATASOURCE_URL
                valueFrom:
                  secretKeyRef:
                    name: app-secrets
                    key: database-url
              - name: SPRING_DATASOURCE_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: app-secrets
                    key: database-username
              - name: SPRING_DATASOURCE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: app-secrets
                    key: database-password
              resources:
                requests:
                  memory: "512Mi"
                  cpu: "250m"
                limits:
                  memory: "1Gi"
                  cpu: "500m"
              livenessProbe:
                httpGet:
                  path: /actuator/health
                  port: 8080
                initialDelaySeconds: 60
                periodSeconds: 30
              readinessProbe:
                httpGet:
                  path: /actuator/health/readiness
                  port: 8080
                initialDelaySeconds: 30
                periodSeconds: 10
      EOF
      
      # Service manifest
      cat > k8s/service.yml << EOF
      apiVersion: v1
      kind: Service
      metadata:
        name: sample-test-service
        namespace: ${NAMESPACE}
        labels:
          app: sample-test
      spec:
        selector:
          app: sample-test
        ports:
        - port: 80
          targetPort: 8080
          protocol: TCP
        type: ClusterIP
      EOF
      
      # Apply manifests
      kubectl apply -f k8s/
      
      # Wait for deployment to be ready
      kubectl rollout status deployment/sample-test-app -n ${NAMESPACE} --timeout=300s
      
      # Get deployment status
      kubectl get pods -n ${NAMESPACE} -l app=sample-test
  environment:
    name: development
    url: https://sample-test-dev.${CLUSTER_DOMAIN}
  dependencies:
    - build-docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

# Deploy to Staging Environment
deploy-staging:
  stage: deploy
  image: alpine/k8s:1.28.2
  variables:
    ENVIRONMENT: "staging"
    NAMESPACE: "sample-test-staging"
  script:
    - |
      # Similar to dev deployment but with staging configurations
      mkdir -p k8s
      
      cat > k8s/deployment.yml << EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: sample-test-app
        namespace: ${NAMESPACE}
        labels:
          app: sample-test
          environment: ${ENVIRONMENT}
      spec:
        replicas: 3
        selector:
          matchLabels:
            app: sample-test
        template:
          metadata:
            labels:
              app: sample-test
          spec:
            containers:
            - name: sample-test
              image: ${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHA}
              ports:
              - containerPort: 8080
              env:
              - name: SPRING_PROFILES_ACTIVE
                value: "staging"
              - name: SPRING_DATASOURCE_URL
                valueFrom:
                  secretKeyRef:
                    name: app-secrets-staging
                    key: database-url
              - name: SPRING_DATASOURCE_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: app-secrets-staging
                    key: database-username
              - name: SPRING_DATASOURCE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: app-secrets-staging
                    key: database-password
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "500m"
                limits:
                  memory: "2Gi"
                  cpu: "1000m"
              livenessProbe:
                httpGet:
                  path: /actuator/health
                  port: 8080
                initialDelaySeconds: 60
                periodSeconds: 30
              readinessProbe:
                httpGet:
                  path: /actuator/health/readiness
                  port: 8080
                initialDelaySeconds: 30
                periodSeconds: 10
      EOF
      
      cat > k8s/service.yml << EOF
      apiVersion: v1
      kind: Service
      metadata:
        name: sample-test-service
        namespace: ${NAMESPACE}
        labels:
          app: sample-test
      spec:
        selector:
          app: sample-test
        ports:
        - port: 80
          targetPort: 8080
          protocol: TCP
        type: ClusterIP
      EOF
      
      kubectl apply -f k8s/
      kubectl rollout status deployment/sample-test-app -n ${NAMESPACE} --timeout=300s
      kubectl get pods -n ${NAMESPACE} -l app=sample-test
  environment:
    name: staging
    url: https://sample-test-staging.${CLUSTER_DOMAIN}
  dependencies:
    - build-docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

# Deploy to Production Environment
deploy-production:
  stage: deploy
  image: alpine/k8s:1.28.2
  variables:
    ENVIRONMENT: "production"
    NAMESPACE: "sample-test-prod"
  script:
    - |
      # Production deployment with higher resources and multiple replicas
      mkdir -p k8s
      
      cat > k8s/deployment.yml << EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: sample-test-app
        namespace: ${NAMESPACE}
        labels:
          app: sample-test
          environment: ${ENVIRONMENT}
      spec:
        replicas: 5
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 1
            maxSurge: 1
        selector:
          matchLabels:
            app: sample-test
        template:
          metadata:
            labels:
              app: sample-test
          spec:
            containers:
            - name: sample-test
              image: ${DOCKER_IMAGE_NAME}:${CI_COMMIT_TAG:-${CI_COMMIT_SHA}}
              ports:
              - containerPort: 8080
              env:
              - name: SPRING_PROFILES_ACTIVE
                value: "production"
              - name: SPRING_DATASOURCE_URL
                valueFrom:
                  secretKeyRef:
                    name: app-secrets-prod
                    key: database-url
              - name: SPRING_DATASOURCE_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: app-secrets-prod
                    key: database-username
              - name: SPRING_DATASOURCE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: app-secrets-prod
                    key: database-password
              resources:
                requests:
                  memory: "2Gi"
                  cpu: "1000m"
                limits:
                  memory: "4Gi"
                  cpu: "2000m"
              livenessProbe:
                httpGet:
                  path: /actuator/health
                  port: 8080
                initialDelaySeconds: 120
                periodSeconds: 30
              readinessProbe:
                httpGet:
                  path: /actuator/health/readiness
                  port: 8080
                initialDelaySeconds: 60
                periodSeconds: 10
      EOF
      
      cat > k8s/service.yml << EOF
      apiVersion: v1
      kind: Service
      metadata:
        name: sample-test-service
        namespace: ${NAMESPACE}
        labels:
          app: sample-test
      spec:
        selector:
          app: sample-test
        ports:
        - port: 80
          targetPort: 8080
          protocol: TCP
        type: ClusterIP
      EOF
      
      kubectl apply -f k8s/
      kubectl rollout status deployment/sample-test-app -n ${NAMESPACE} --timeout=600s
      kubectl get pods -n ${NAMESPACE} -l app=sample-test
  environment:
    name: production
    url: https://sample-test.${CLUSTER_DOMAIN}
  dependencies:
    - build-docker
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# Security scanning (Optional)
security-scan:
  stage: test
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - |
      # Install Trivy
      apk add --no-cache curl
      curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      
      # Scan the built image
      trivy image --format json --output trivy-report.json $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA
      trivy image --severity HIGH,CRITICAL $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    when: always
    paths:
      - trivy-report.json
    expire_in: 1 week
  dependencies:
    - build-docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  allow_failure: true 
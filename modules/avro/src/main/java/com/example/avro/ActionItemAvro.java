/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for Action Items in the system. This schema defines the contract for messages exchanged via Kafka. */
@org.apache.avro.specific.AvroGenerated
public class ActionItemAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8914299500649743483L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ActionItemAvro\",\"namespace\":\"com.example.avro\",\"doc\":\"Schema for Action Items in the system. This schema defines the contract for messages exchanged via Kafka.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for the action item. Generated as UUID.\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Title of the action item. Must be between 3 and 100 characters.\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Detailed description of what needs to be done. Optional for PENDING items, required for others.\"},{\"name\":\"assignee\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Person or team assigned to complete this item. Required for non-PENDING items.\"},{\"name\":\"category\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Category of the action item.\"},{\"name\":\"typeCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Type code of the action item.\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"ActionItemStatusAvro\",\"doc\":\"Possible states of an action item in its lifecycle.\",\"symbols\":[\"OPEN\",\"CLOSE\",\"UNKNOWN\",\"PENDING\",\"IN_PROGRESS\",\"COMPLETED\",\"CANCELLED\"]},\"doc\":\"Current status of the action item. Transitions must follow defined workflow.\"},{\"name\":\"dueDate\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"When this action item is due. Must be after creation date.\"},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp when this action item was created.\"},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp of the last update to this action item.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ActionItemAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ActionItemAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ActionItemAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ActionItemAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ActionItemAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ActionItemAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ActionItemAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ActionItemAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ActionItemAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the action item. Generated as UUID. */
  private java.lang.String id;
  /** Title of the action item. Must be between 3 and 100 characters. */
  private java.lang.String title;
  /** Detailed description of what needs to be done. Optional for PENDING items, required for others. */
  private java.lang.String description;
  /** Person or team assigned to complete this item. Required for non-PENDING items. */
  private java.lang.String assignee;
  /** Category of the action item. */
  private java.lang.String category;
  /** Type code of the action item. */
  private java.lang.String typeCode;
  /** Current status of the action item. Transitions must follow defined workflow. */
  private com.example.avro.ActionItemStatusAvro status;
  /** When this action item is due. Must be after creation date. */
  private java.time.Instant dueDate;
  /** Timestamp when this action item was created. */
  private java.time.Instant createdAt;
  /** Timestamp of the last update to this action item. */
  private java.time.Instant updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ActionItemAvro() {}

  /**
   * All-args constructor.
   * @param id Unique identifier for the action item. Generated as UUID.
   * @param title Title of the action item. Must be between 3 and 100 characters.
   * @param description Detailed description of what needs to be done. Optional for PENDING items, required for others.
   * @param assignee Person or team assigned to complete this item. Required for non-PENDING items.
   * @param category Category of the action item.
   * @param typeCode Type code of the action item.
   * @param status Current status of the action item. Transitions must follow defined workflow.
   * @param dueDate When this action item is due. Must be after creation date.
   * @param createdAt Timestamp when this action item was created.
   * @param updatedAt Timestamp of the last update to this action item.
   */
  public ActionItemAvro(java.lang.String id, java.lang.String title, java.lang.String description, java.lang.String assignee, java.lang.String category, java.lang.String typeCode, com.example.avro.ActionItemStatusAvro status, java.time.Instant dueDate, java.time.Instant createdAt, java.time.Instant updatedAt) {
    this.id = id;
    this.title = title;
    this.description = description;
    this.assignee = assignee;
    this.category = category;
    this.typeCode = typeCode;
    this.status = status;
    this.dueDate = dueDate.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.updatedAt = updatedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return title;
    case 2: return description;
    case 3: return assignee;
    case 4: return category;
    case 5: return typeCode;
    case 6: return status;
    case 7: return dueDate;
    case 8: return createdAt;
    case 9: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: title = value$ != null ? value$.toString() : null; break;
    case 2: description = value$ != null ? value$.toString() : null; break;
    case 3: assignee = value$ != null ? value$.toString() : null; break;
    case 4: category = value$ != null ? value$.toString() : null; break;
    case 5: typeCode = value$ != null ? value$.toString() : null; break;
    case 6: status = (com.example.avro.ActionItemStatusAvro)value$; break;
    case 7: dueDate = (java.time.Instant)value$; break;
    case 8: createdAt = (java.time.Instant)value$; break;
    case 9: updatedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Unique identifier for the action item. Generated as UUID.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Unique identifier for the action item. Generated as UUID.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return Title of the action item. Must be between 3 and 100 characters.
   */
  public java.lang.String getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * Title of the action item. Must be between 3 and 100 characters.
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Detailed description of what needs to be done. Optional for PENDING items, required for others.
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * Detailed description of what needs to be done. Optional for PENDING items, required for others.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'assignee' field.
   * @return Person or team assigned to complete this item. Required for non-PENDING items.
   */
  public java.lang.String getAssignee() {
    return assignee;
  }


  /**
   * Sets the value of the 'assignee' field.
   * Person or team assigned to complete this item. Required for non-PENDING items.
   * @param value the value to set.
   */
  public void setAssignee(java.lang.String value) {
    this.assignee = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return Category of the action item.
   */
  public java.lang.String getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * Category of the action item.
   * @param value the value to set.
   */
  public void setCategory(java.lang.String value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'typeCode' field.
   * @return Type code of the action item.
   */
  public java.lang.String getTypeCode() {
    return typeCode;
  }


  /**
   * Sets the value of the 'typeCode' field.
   * Type code of the action item.
   * @param value the value to set.
   */
  public void setTypeCode(java.lang.String value) {
    this.typeCode = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Current status of the action item. Transitions must follow defined workflow.
   */
  public com.example.avro.ActionItemStatusAvro getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * Current status of the action item. Transitions must follow defined workflow.
   * @param value the value to set.
   */
  public void setStatus(com.example.avro.ActionItemStatusAvro value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'dueDate' field.
   * @return When this action item is due. Must be after creation date.
   */
  public java.time.Instant getDueDate() {
    return dueDate;
  }


  /**
   * Sets the value of the 'dueDate' field.
   * When this action item is due. Must be after creation date.
   * @param value the value to set.
   */
  public void setDueDate(java.time.Instant value) {
    this.dueDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return Timestamp when this action item was created.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * Timestamp when this action item was created.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return Timestamp of the last update to this action item.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * Timestamp of the last update to this action item.
   * @param value the value to set.
   */
  public void setUpdatedAt(java.time.Instant value) {
    this.updatedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new ActionItemAvro RecordBuilder.
   * @return A new ActionItemAvro RecordBuilder
   */
  public static com.example.avro.ActionItemAvro.Builder newBuilder() {
    return new com.example.avro.ActionItemAvro.Builder();
  }

  /**
   * Creates a new ActionItemAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ActionItemAvro RecordBuilder
   */
  public static com.example.avro.ActionItemAvro.Builder newBuilder(com.example.avro.ActionItemAvro.Builder other) {
    if (other == null) {
      return new com.example.avro.ActionItemAvro.Builder();
    } else {
      return new com.example.avro.ActionItemAvro.Builder(other);
    }
  }

  /**
   * Creates a new ActionItemAvro RecordBuilder by copying an existing ActionItemAvro instance.
   * @param other The existing instance to copy.
   * @return A new ActionItemAvro RecordBuilder
   */
  public static com.example.avro.ActionItemAvro.Builder newBuilder(com.example.avro.ActionItemAvro other) {
    if (other == null) {
      return new com.example.avro.ActionItemAvro.Builder();
    } else {
      return new com.example.avro.ActionItemAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for ActionItemAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ActionItemAvro>
    implements org.apache.avro.data.RecordBuilder<ActionItemAvro> {

    /** Unique identifier for the action item. Generated as UUID. */
    private java.lang.String id;
    /** Title of the action item. Must be between 3 and 100 characters. */
    private java.lang.String title;
    /** Detailed description of what needs to be done. Optional for PENDING items, required for others. */
    private java.lang.String description;
    /** Person or team assigned to complete this item. Required for non-PENDING items. */
    private java.lang.String assignee;
    /** Category of the action item. */
    private java.lang.String category;
    /** Type code of the action item. */
    private java.lang.String typeCode;
    /** Current status of the action item. Transitions must follow defined workflow. */
    private com.example.avro.ActionItemStatusAvro status;
    /** When this action item is due. Must be after creation date. */
    private java.time.Instant dueDate;
    /** Timestamp when this action item was created. */
    private java.time.Instant createdAt;
    /** Timestamp of the last update to this action item. */
    private java.time.Instant updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.avro.ActionItemAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.assignee)) {
        this.assignee = data().deepCopy(fields()[3].schema(), other.assignee);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.category)) {
        this.category = data().deepCopy(fields()[4].schema(), other.category);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.typeCode)) {
        this.typeCode = data().deepCopy(fields()[5].schema(), other.typeCode);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.dueDate)) {
        this.dueDate = data().deepCopy(fields()[7].schema(), other.dueDate);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing ActionItemAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.avro.ActionItemAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.assignee)) {
        this.assignee = data().deepCopy(fields()[3].schema(), other.assignee);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.category)) {
        this.category = data().deepCopy(fields()[4].schema(), other.category);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.typeCode)) {
        this.typeCode = data().deepCopy(fields()[5].schema(), other.typeCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.dueDate)) {
        this.dueDate = data().deepCopy(fields()[7].schema(), other.dueDate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Unique identifier for the action item. Generated as UUID.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Unique identifier for the action item. Generated as UUID.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Unique identifier for the action item. Generated as UUID.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Unique identifier for the action item. Generated as UUID.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * Title of the action item. Must be between 3 and 100 characters.
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * Title of the action item. Must be between 3 and 100 characters.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setTitle(java.lang.String value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * Title of the action item. Must be between 3 and 100 characters.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * Title of the action item. Must be between 3 and 100 characters.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Detailed description of what needs to be done. Optional for PENDING items, required for others.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Detailed description of what needs to be done. Optional for PENDING items, required for others.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Detailed description of what needs to be done. Optional for PENDING items, required for others.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * Detailed description of what needs to be done. Optional for PENDING items, required for others.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'assignee' field.
      * Person or team assigned to complete this item. Required for non-PENDING items.
      * @return The value.
      */
    public java.lang.String getAssignee() {
      return assignee;
    }


    /**
      * Sets the value of the 'assignee' field.
      * Person or team assigned to complete this item. Required for non-PENDING items.
      * @param value The value of 'assignee'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setAssignee(java.lang.String value) {
      validate(fields()[3], value);
      this.assignee = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'assignee' field has been set.
      * Person or team assigned to complete this item. Required for non-PENDING items.
      * @return True if the 'assignee' field has been set, false otherwise.
      */
    public boolean hasAssignee() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'assignee' field.
      * Person or team assigned to complete this item. Required for non-PENDING items.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearAssignee() {
      assignee = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * Category of the action item.
      * @return The value.
      */
    public java.lang.String getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * Category of the action item.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setCategory(java.lang.String value) {
      validate(fields()[4], value);
      this.category = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * Category of the action item.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'category' field.
      * Category of the action item.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearCategory() {
      category = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'typeCode' field.
      * Type code of the action item.
      * @return The value.
      */
    public java.lang.String getTypeCode() {
      return typeCode;
    }


    /**
      * Sets the value of the 'typeCode' field.
      * Type code of the action item.
      * @param value The value of 'typeCode'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setTypeCode(java.lang.String value) {
      validate(fields()[5], value);
      this.typeCode = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'typeCode' field has been set.
      * Type code of the action item.
      * @return True if the 'typeCode' field has been set, false otherwise.
      */
    public boolean hasTypeCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'typeCode' field.
      * Type code of the action item.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearTypeCode() {
      typeCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Current status of the action item. Transitions must follow defined workflow.
      * @return The value.
      */
    public com.example.avro.ActionItemStatusAvro getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Current status of the action item. Transitions must follow defined workflow.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setStatus(com.example.avro.ActionItemStatusAvro value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Current status of the action item. Transitions must follow defined workflow.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * Current status of the action item. Transitions must follow defined workflow.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'dueDate' field.
      * When this action item is due. Must be after creation date.
      * @return The value.
      */
    public java.time.Instant getDueDate() {
      return dueDate;
    }


    /**
      * Sets the value of the 'dueDate' field.
      * When this action item is due. Must be after creation date.
      * @param value The value of 'dueDate'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setDueDate(java.time.Instant value) {
      validate(fields()[7], value);
      this.dueDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'dueDate' field has been set.
      * When this action item is due. Must be after creation date.
      * @return True if the 'dueDate' field has been set, false otherwise.
      */
    public boolean hasDueDate() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'dueDate' field.
      * When this action item is due. Must be after creation date.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearDueDate() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * Timestamp when this action item was created.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * Timestamp when this action item was created.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[8], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * Timestamp when this action item was created.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * Timestamp when this action item was created.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearCreatedAt() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * Timestamp of the last update to this action item.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * Timestamp of the last update to this action item.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[9], value);
      this.updatedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * Timestamp of the last update to this action item.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * Timestamp of the last update to this action item.
      * @return This builder.
      */
    public com.example.avro.ActionItemAvro.Builder clearUpdatedAt() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ActionItemAvro build() {
      try {
        ActionItemAvro record = new ActionItemAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.assignee = fieldSetFlags()[3] ? this.assignee : (java.lang.String) defaultValue(fields()[3]);
        record.category = fieldSetFlags()[4] ? this.category : (java.lang.String) defaultValue(fields()[4]);
        record.typeCode = fieldSetFlags()[5] ? this.typeCode : (java.lang.String) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (com.example.avro.ActionItemStatusAvro) defaultValue(fields()[6]);
        record.dueDate = fieldSetFlags()[7] ? this.dueDate : (java.time.Instant) defaultValue(fields()[7]);
        record.createdAt = fieldSetFlags()[8] ? this.createdAt : (java.time.Instant) defaultValue(fields()[8]);
        record.updatedAt = fieldSetFlags()[9] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ActionItemAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ActionItemAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ActionItemAvro>
    READER$ = (org.apache.avro.io.DatumReader<ActionItemAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










